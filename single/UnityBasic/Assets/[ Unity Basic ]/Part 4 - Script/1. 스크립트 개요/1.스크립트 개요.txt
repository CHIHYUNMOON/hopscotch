=============================================================
1. 스크립트 개요...
[
	참고 :	https://docs.unity3d.com/kr/2018.4/Manual/ScriptingSection.html
			https://m.blog.naver.com/yoohee2018/220773367826
			https://m.blog.naver.com/ruvendix/220870609273
]
=============================================================
---------------------
@	스크립트
---------------------
	-	유니티에서 스크립트란
		게임오브젝트의 행동을 제어하는 코드.

	-	C#, JavaScript, Boo 언어등을 지원했으나 
		현재는 기본적으로 C#만 지원.



---------------------
@	환경 설정.
---------------------
	-	스크립트 툴 설정.
		-	메뉴 > Edit > Peference - External Tools
			> External Script Editor 에서 선택.


---------------------
@	디버깅
---------------------
	-	에러를 찾아 해결해나가는 과정.
	-	방법( 비주얼 스튜디오 기준 )
		-	디버깅 모드로 실행.
			-	F5 또는 툴바 > [ |> 연결 ... ]버튼 클릭 후 프로젝트 실행.

		-	브레이크 포인트 설정
			-	데이터를 확인하고자 하는 프로세스에 설정.
			-	F9

		-	다음 브레이크 포인트 처리
			-	F5

		-	다음 프로세스 진행 - 1
			-	F10			

		-	다음 프로세스 진행 - 2
			-	F11
			-	현재 프로세스가 함수라면 함수 내부로 이동.

		-	자동 영역 창
			-	현재 프로세스와 이전 프로세스의 데이터( 변수 ) 정보 출력.

		-	지역 영역 창
			-	현재 지역( 코드 블록 )에 있는 모든 데이터( 변수 )의 정보 출력.

		-	조사식 창
			-	개발자가 원하는 데이터를 추적하여 볼수 있음.

		-	호출 스택 창
			-	현재 프로세스가 호출된 부분을 역추적.
			-	데이터의 연산결과가 나온 원인을 찾고자 할때 효과적.
				
---------------------
@	주요기능 및 특징
---------------------
	-	스크립트 파일의 이름과 그 안에 정의된 모노 클래스( MonoBehaviour를 상속받는 클래스 )의 이름이
		다르면 에러 발생.
		
	-	하나의 게임 오브젝트에 여러개의 스크립트( 컴포넌트 )를 
		추가할 수 있음.

	-	게임 오브젝트에 추가하는 스크립트는 
		MonoBehaviour 클래스를 필수로 상속받아야 함.
		-	MonoBehaviour 클래스를 상속받는 클래스는
			new 로 생성할 수 없음.

	-	스크립트의 gameObject는 해당 스크립트가 연결된 게임 오브젝트의
		참조값을 반환.

	-	GetComponent 계열 함수. 
		-	게임 오브젝트에 연결된 다른 컴포넌트를 참조.

	-	GameObject.Find 계열 함수.
		-	씬에 있는 게임 오브젝트 중 특정 게임 오브젝트를 참조.

	-	접근 제한자 
		-	public으로 선언한 변수는 인스펙터 창에 노출되며,
			인스펙터 창에서 값을 편집할 수 있음.
		-	private의 경우 [ SerializeField ] 속성을 적용하면
			인스펙터창에서 제어 가능.

	-	인스펙터에 노출된 정보들은 대부분 스크립트로 제어 가능.
		-	단, 인스펙터에 노출된 이름과 스크립트로 제어가능한 이름이 다를수 있으므로
			메뉴얼이나 인터넷 자료 참조.

=============================================================//